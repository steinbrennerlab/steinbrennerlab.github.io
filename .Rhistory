#need to output only class for a single comp...
cat_volcano1_data <- FCs_new %>% filter(comp=="I1H1")
cat_volcano1 <- ggplot(cat_volcano1_data) + theme_minimal() + aes(y=I1H1_log2FC,x=H1U1_log2FC) + geom_point(size=0.4,aes(col=class)) + theme(panel.background = element_rect(),panel.grid=element_blank()) + scale_x_continuous(expand=c(0.1,0.1)) + xlab("W") +ylab("W+I")
cat_volcano1
ggsave("boxplots/test_volcano.pdf",cat_volcano1,width=12,height=5)
#size=basemean??
W1 <- (deseq_input %>% filter(comp=="H1U1") %>% filter(class==-1) %>% select(gene))
W1 <- intersect(W1$gene,W1$gene)
I1 <- deseq_input %>% filter(comp=="I1U1") %>% filter(class==-1) %>% select(gene)
I1 <- intersect(I1$gene,I1$gene)
W6 <- deseq_input %>% filter(comp=="H6U1") %>% filter(class==-1) %>% select(gene)
W6 <- intersect(W6$gene,W6$gene)
I6 <- deseq_input %>% filter(comp=="I6U1") %>% filter(class==-1) %>% select(gene)
I6 <- intersect(I6$gene,I6$gene)
W1I1 <- intersect (W1,I1)
W1W6 <- intersect (W1,W6)
I1W6 <- intersect (I1,W6)
I1I6 <- intersect (I1,I6)
W6I6 <- intersect(W6,I6)
W1I1W6 <- intersect(W1I1,W6)
W1I1I6 <- intersect(W1I1,I6)
W1W6I6 <- intersect(W1W6,I6)
I1W6I6 <- intersect(I1W6,I6)
W1I1W6I6 <- intersect(W1I1W6,I6)
venn4 <- c(W1=length(W1),I1=length(I1),W6=length(W6),I6=length(I6),"W1&I1"=length(W1I1),"W1&W6"=length(W1W6),"I1&W6"=length(I1W6),"W6&I6"=length(W6I6),"W1&I1&W6"=length(W1I1W6),"W1&I1&I6"=length(W1I1I6),"I1&W6&I6"=length(I1W6I6),"W1&I1&W6&I6"=length(W1I1W6I6))
fit4 <- euler(venn4)
#plot(fit4, fills = c("#dcab4e","#e26d5c","#d35d71","#be848d"),
#edges = FALSE,fontsize = 8, shape="ellipse",quantities=TRUE)
library(ggalluvial)
library(dplyr)
library(readr)
library(stringr)
library(ggplot2)
library(alluvial)
library(scales)
library(cowplot)
library(tidyr)
setwd("C:/Users/Adams/Dropbox/00_UCSD/manuscript/transcriptome/scripts/deseq")
deseq_input <- read_csv("DESeq_allcomps_alluv.csv")
#Load and make sure it looks OK
deseq_input
annotations <- read_csv("input_annotations.csv")
setwd("C:/Users/Adams/Dropbox/00_UCSD/manuscript/transcriptome/scripts")
counts <- read_csv("counts_avg_log2.csv")
#the script gives each gene*comp row a "class" depending on meeting significance and fold change thresholds.  Then dplyrfilters by certain class*comparison criteria
pval <- 0.05
higher <- 1
high <- 1
lower <- -1 #to exclude downreg, just make this threshold large
low <- -1
otherwise <- "less than 1"
#plotting parameters
color0<-"#F3E207"
color1<-"darkgoldenrod1" #lightorange
color2<-"darkorange1"
color3<-"lightgoldenrod2"
color35<-"salmon1"
color4<-"red1"
color5<-"firebrick"
color6<-"tomato2" #darkred
color7<-"grey"
ylim<-c(-4,10)
boxplot_font_size <- 16
new_theme <- theme_minimal() +
theme(legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size=boxplot_font_size),
axis.text.y = element_text(size=boxplot_font_size),
axis.title.y = element_text(size=boxplot_font_size),
plot.title = element_text(size=boxplot_font_size),
axis.title.x=element_blank())
deseq_input <- mutate(deseq_input,
relMean = log2(baseMean*2^(log2FoldChange)/baseMean),
sig = ifelse(padj < pval,1,0),
class = ifelse(is.na(sig),otherwise,
ifelse(sig==1,
ifelse(log2FoldChange>higher,higher,
ifelse(log2FoldChange>high,high,
ifelse(log2FoldChange<lower,lower,
ifelse(log2FoldChange<low,low,otherwise)))),otherwise))
)
require(scales)
numcomp <- 2
comp1 <- "H1U1"
comp2 <- "I1U1"
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% group_by(gene,class) %>%
filter(class!=otherwise | n()<numcomp)
alluv1 <- ggplot(alluv_set,
aes(x=comp, stratum = class, alluvium = id, y = id,label=class,fill=class)) +
geom_flow() +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3) +
theme_classic() +
scale_y_continuous(labels=NULL, expand=c(0,0)) +
scale_fill_manual(
#5 colors for the 5 classes; change if you want a different number
values = c("blue1", "green1", "grey50", "grey60")) +
guides(fill=guide_legend(title="log2(FC)")) +
#Corrects the order of x categories
scale_x_discrete(limits = c(comp1,comp2)) +
#counts and prints as the ylabel the number of remaining datapoints within a single comparison axis
theme(legend.position = "none") +
ylab(paste(nrow(filter(alluv_set,comp==comp1)),"differentially expressed genes"))
#Visualize the alluvial diagram
alluv1
numcomp <- 2
comp1 <- "H6U1"
comp2 <- "I6U1"
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% group_by(gene,class) %>%
filter(class!=otherwise | n()<numcomp)
alluv6 <- ggplot(alluv_set,
aes(x=comp, stratum = class, alluvium = id, y = id,label=class,fill=class)) +
geom_flow() +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3) +
theme(legend.position = "none") +
theme_classic() +
scale_y_continuous(labels=NULL, expand=c(0,0)) +
scale_fill_manual(
#5 colors for the 5 classes; change if you want a different number
values = c("blue1", "green1", "grey50", "grey60")) +
guides(fill=guide_legend(title="log2(FC)")) +
#Corrects the order of x categories
scale_x_discrete(limits = c(comp1,comp2)) +
#counts and prints as the ylabel the number of remaining datapoints within a single comparison axis
theme(legend.position = "none") +
ylab(paste(nrow(filter(alluv_set,comp==comp1)),"differentially expressed genes"))
#Visualize the alluvial diagram
alluv6
ggsave("boxplots/alluvS1A.png",alluv1,height=5)
ggsave("boxplots/alluvS1B.png",alluv6,height=9.55)
ggsave("boxplots/alluv.pdf",plot_grid(alluv1,alluv6),height=5,width=14)
View(alluv_set)
mutate_each?
a
?mutate_each
alluv_set <- alluv_set %>% replace(class,1,"test")
alluv_set <- alluv_set %>% replace(class,1)
alluv_set <- alluv_set %>% mutate_at(class,"test","less than 1")
alluv_set <- mutate_at(alluv_set,class,"test","less than 1")
alluv_set <- mutate_at(alluv_set,"class","test","less than 1")
alluv_set <- mutate_at(alluv_set,"class",str_replace,"less than 1","n.s.")
View(alluv1)
View(alluv_set)
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% mutate_at(alluv_set,"class",str_replace,"less than 1","n.s.") %>% group_by(gene,class) %>%
filter(class!=otherwise | n()<numcomp)
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% mutate_at("class",str_replace,"less than 1","n.s.") %>% group_by(gene,class) %>% filter(class!=otherwise | n()<numcomp)
View(alluv_set)
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% mutate_at("class",str_replace,"less than 1","n.s.") %>% mutate_at("class",str_replace,"-1","down") %>% mutate_at("class",str_replace,"1","up") %>% group_by(gene,class) %>% filter(class!=otherwise | n()<numcomp)
View(alluv_set)
require(scales)
numcomp <- 2
comp1 <- "H1U1"
comp2 <- "I1U1"
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% mutate_at("class",str_replace,"less than 1","3_n.s.") %>% mutate_at("class",str_replace,"-1","2_down") %>% mutate_at("class",str_replace,"1","1_up") %>% group_by(gene,class) %>% filter(class!=otherwise | n()<numcomp)
alluv1 <- ggplot(alluv_set,
aes(x=comp, stratum = class, alluvium = id, y = id,label=class,fill=class)) +
geom_flow() +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3) +
theme_classic() +
scale_y_continuous(labels=NULL, expand=c(0,0)) +
scale_fill_manual(
#5 colors for the 5 classes; change if you want a different number
values = c("blue1", "green1", "grey50", "grey60")) +
guides(fill=guide_legend(title="log2(FC)")) +
#Corrects the order of x categories
scale_x_discrete(limits = c(comp1,comp2)) +
#counts and prints as the ylabel the number of remaining datapoints within a single comparison axis
theme(legend.position = "none") +
ylab(paste(nrow(filter(alluv_set,comp==comp1)),"differentially expressed genes"))
#Visualize the alluvial diagram
alluv1
numcomp <- 2
comp1 <- "H6U1"
comp2 <- "I6U1"
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% group_by(gene,class) %>%
filter(class!=otherwise | n()<numcomp)
alluv6 <- ggplot(alluv_set,
aes(x=comp, stratum = class, alluvium = id, y = id,label=class,fill=class)) +
geom_flow() +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3) +
theme(legend.position = "none") +
theme_classic() +
scale_y_continuous(labels=NULL, expand=c(0,0)) +
scale_fill_manual(
#5 colors for the 5 classes; change if you want a different number
values = c("blue1", "green1", "grey50", "grey60")) +
guides(fill=guide_legend(title="log2(FC)")) +
#Corrects the order of x categories
scale_x_discrete(limits = c(comp1,comp2)) +
#counts and prints as the ylabel the number of remaining datapoints within a single comparison axis
theme(legend.position = "none") +
ylab(paste(nrow(filter(alluv_set,comp==comp1)),"differentially expressed genes"))
#Visualize the alluvial diagram
alluv6
ggsave("boxplots/alluvS1A.png",alluv1,height=5)
ggsave("boxplots/alluvS1B.png",alluv6,height=9.55)
ggsave("boxplots/alluv.pdf",plot_grid(alluv1,alluv6),height=5,width=14)
require(scales)
numcomp <- 2
comp1 <- "H1U1"
comp2 <- "I1U1"
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% mutate_at("class",str_replace,"less than 1","3_n.s.") %>% mutate_at("class",str_replace,"-1","2_down") %>% mutate_at("class",str_replace,"1","1_up") %>% group_by(gene,class) %>% filter(class!="3_n.s." | n()<numcomp)
alluv1 <- ggplot(alluv_set,
aes(x=comp, stratum = class, alluvium = id, y = id,label=class,fill=class)) +
geom_flow() +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3) +
theme_classic() +
scale_y_continuous(labels=NULL, expand=c(0,0)) +
scale_fill_manual(
#5 colors for the 5 classes; change if you want a different number
values = c("blue1", "green1", "grey50", "grey60")) +
guides(fill=guide_legend(title="log2(FC)")) +
#Corrects the order of x categories
scale_x_discrete(limits = c(comp1,comp2)) +
#counts and prints as the ylabel the number of remaining datapoints within a single comparison axis
theme(legend.position = "none") +
ylab(paste(nrow(filter(alluv_set,comp==comp1)),"differentially expressed genes"))
#Visualize the alluvial diagram
alluv1
numcomp <- 2
comp1 <- "H6U1"
comp2 <- "I6U1"
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% group_by(gene,class) %>%
filter(class!=otherwise | n()<numcomp)
alluv6 <- ggplot(alluv_set,
aes(x=comp, stratum = class, alluvium = id, y = id,label=class,fill=class)) +
geom_flow() +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3) +
theme(legend.position = "none") +
theme_classic() +
scale_y_continuous(labels=NULL, expand=c(0,0)) +
scale_fill_manual(
#5 colors for the 5 classes; change if you want a different number
values = c("blue1", "green1", "grey50", "grey60")) +
guides(fill=guide_legend(title="log2(FC)")) +
#Corrects the order of x categories
scale_x_discrete(limits = c(comp1,comp2)) +
#counts and prints as the ylabel the number of remaining datapoints within a single comparison axis
theme(legend.position = "none") +
ylab(paste(nrow(filter(alluv_set,comp==comp1)),"differentially expressed genes"))
#Visualize the alluvial diagram
alluv6
ggsave("boxplots/alluvS1A.png",alluv1,height=5)
ggsave("boxplots/alluvS1B.png",alluv6,height=9.55)
ggsave("boxplots/alluv.pdf",plot_grid(alluv1,alluv6),height=5,width=14)
require(scales)
numcomp <- 2
comp1 <- "H1U1"
comp2 <- "I1U1"
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% mutate_at("class",str_replace,"less than 1","3_n.s.") %>% mutate_at("class",str_replace,"-1","2_down") %>% mutate_at("class",str_replace,"1","1_up") %>% group_by(gene,class) %>% filter(class!="3_n.s." | n()<numcomp)
alluv1 <- ggplot(alluv_set,
aes(x=comp, stratum = class, alluvium = id, y = id,label=class,fill=class)) +
geom_flow() +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3) +
theme_classic() +
scale_y_continuous(labels=NULL, expand=c(0,0)) +
scale_fill_manual(
#5 colors for the 5 classes; change if you want a different number
values = c("green1", "blue1", "grey50", "grey60")) +
guides(fill=guide_legend(title="log2(FC)")) +
#Corrects the order of x categories
scale_x_discrete(limits = c(comp1,comp2)) +
#counts and prints as the ylabel the number of remaining datapoints within a single comparison axis
theme(legend.position = "none") +
ylab(paste(nrow(filter(alluv_set,comp==comp1)),"differentially expressed genes"))
#Visualize the alluvial diagram
alluv1
numcomp <- 2
comp1 <- "H6U1"
comp2 <- "I6U1"
alluv_set <- deseq_input %>% filter(comp==comp1 | comp==comp2) %>% mutate(cat="up") %>% mutate_at("class",str_replace,"less than 1","3_n.s.") %>% mutate_at("class",str_replace,"-1","2_down") %>% mutate_at("class",str_replace,"1","1_up") %>% group_by(gene,class) %>% filter(class!="3_n.s." | n()<numcomp)
alluv6 <- ggplot(alluv_set,
aes(x=comp, stratum = class, alluvium = id, y = id,label=class,fill=class)) +
geom_flow() +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3) +
theme(legend.position = "none") +
theme_classic() +
scale_y_continuous(labels=NULL, expand=c(0,0)) +
scale_fill_manual(
#5 colors for the 5 classes; change if you want a different number
values = c("green1", "blue1", "grey50", "grey60")) +
guides(fill=guide_legend(title="log2(FC)")) +
#Corrects the order of x categories
scale_x_discrete(limits = c(comp1,comp2)) +
#counts and prints as the ylabel the number of remaining datapoints within a single comparison axis
theme(legend.position = "none") +
ylab(paste(nrow(filter(alluv_set,comp==comp1)),"differentially expressed genes"))
#Visualize the alluvial diagram
alluv6
ggsave("boxplots/alluvS1A.png",alluv1,height=5)
ggsave("boxplots/alluvS1B.png",alluv6,height=9.55)
ggsave("boxplots/alluv.pdf",plot_grid(alluv1,alluv6),height=5,width=14)
ggsave("boxplots/alluvS1A.png",alluv1,width=3,height=5)
ggsave("boxplots/alluvS1A.png",alluv1,width=5,height=5)
ggsave("boxplots/alluvS1A.png",alluv1,width=5,height=5)
ggsave("boxplots/alluvS1B.png",alluv6,width=5,height=9.55)
ggsave("boxplots/alluvS1A.png",alluv1,width=8,height=5)
ggsave("boxplots/alluvS1B.png",alluv6,width=8,height=9.55)
ggsave("boxplots/alluvS1A.png",alluv1,width=7.5,height=5)
ggsave("boxplots/alluvS1B.png",alluv6,width=7.5,height=9.55)
ggsave("boxplots/alluvS1A.png",alluv1,width=7.3,height=5)
ggsave("boxplots/alluvS1B.png",alluv6,width=7.3,height=9.55)
library(ggalluvial)
library(dplyr)
library(readr)
library(stringr)
library(ggplot2)
library(alluvial)
library(scales)
library(cowplot)
library(tidyr)
setwd("C:/Users/Adams/Dropbox/00_UCSD/manuscript/transcriptome/scripts/pox")
poxdata <- read_csv("200622_compiled_POX_tidy.csv")
poxdata <- poxdata %>% mutate(Genotype=recode(poxdata$Genotype, "POX1"="VuPOX2","POX4"="VuPOX1","POX2"="VuPOX3","POX3"="VuPOX4"))
pox_all <- filter(poxdata, Genotype=="GV3101" | Genotype=="POX1-4")
PoxA_plot<- ggplot(pox_all) + aes(x=Genotype,y=rgr) + geom_boxplot(width = 0.5) + geom_jitter(width=0.15) + theme_cowplot()  + labs(y = expression(paste("Relative Growth Rate (mg* ",day^-1,")"), x = "gene"))
PoxA_plot
pox1_pox4 <- filter(poxdata, date=="2018_aug" & Genotype!="VuPOX3" & Genotype!="VuPOX4" & Genotype!="POX1-4")
P14_plot <- ggplot(pox1_pox4) + aes(x=Genotype,y=rgr) + geom_boxplot(width = 0.5) + geom_jitter(width=0.15) + theme_cowplot() + labs(y = expression(paste("Relative Growth Rate (mg* ",day^-1,")"), x = "gene"))
P14_plot
pox1 <- filter(poxdata, Genotype=="pGWB414" | Genotype=="VuPOX2")
P1_plot_color <- ggplot(pox1) + aes(x=date,y=rgr,color=Genotype) + geom_boxplot(width = 0.75) + theme_cowplot()  + labs(y = expression(paste("Relative Growth Rate (mg* ",day^-1,")"), x = "gene")) + scale_color_manual(values=c("black","blue"))
P1_plot_color
ggsave("boxplots/P1_plot_color.png",P1_plot_color,width=8,height=4)
P1_plot <- ggplot(pox1) + aes(x=Genotype,y=rgr) + geom_boxplot(width = 0.5) + geom_jitter(width=0.15) + theme_cowplot()  + labs(y = expression(paste("Relative Growth Rate (mg* ",day^-1,")"), x = "gene"))
P1_plot
pox1 %>% group_by(Genotype) %>% summarize(mean=mean(rgr,na.rm=TRUE),n=n())
pox1_only <- filter(poxdata, date=="2018_aug" & Genotype!="VuPOX3" & Genotype!="VuPOX4" & Genotype!="POX1-4" & Genotype!="VuPOX2")
P1_only <- ggplot(pox1_only) + aes(x=Genotype,y=rgr) + geom_boxplot(width = 0.5) + geom_jitter(width=0.15) + theme_cowplot() + labs(y = expression(paste("Relative Growth Rate (mg* ",day^-1,")"), x = "gene"))
P1_only
pox2_A <- filter(poxdata, date=="2018_aug" & (Genotype=="pGWB414" | Genotype=="VuPOX2"))
P2_A <- ggplot(pox2_A) + aes(x=Genotype,y=rgr) + geom_boxplot(width = 0.5) + geom_jitter(width=0.15) + theme_cowplot() + labs(y = expression(paste("Relative Growth Rate (mg* ",day^-1,")"), x = "gene"))
P2_A
pox2_B <- filter(poxdata, date=="2018_dec" & (Genotype=="pGWB414" | Genotype=="VuPOX2"))
P2_B <- ggplot(pox2_B) + aes(x=Genotype,y=rgr) + geom_boxplot(width = 0.5) + geom_jitter(width=0.15) + theme_cowplot() + labs(y = expression(paste("Relative Growth Rate (mg* ",day^-1,")"), x = "gene"))
P2_B
pox2_C <- filter(poxdata, date=="2019_feb" & (Genotype=="pGWB414" | Genotype=="VuPOX2"))
P2_C <- ggplot(pox2_C) + aes(x=Genotype,y=rgr) + geom_boxplot(width = 0.5) + geom_jitter(width=0.15) + theme_cowplot() + labs(y = expression(paste("Relative Growth Rate (mg* ",day^-1,")"), x = "gene"))
P2_C
P1_plot_color
View(pox1)
P1_plot <- ggplot(pox1) + aes(x=Genotype,y=rgr) + geom_boxplot(width = 0.5) + geom_jitter(width=0.15) + theme_cowplot()  + labs(y = expression(paste("Relative Growth Rate (mg* ",day^-1,")"), x = "gene"))
P1_plot
pox1 %>% group_by(date) %>% summarize(mean=mean(rgr,na.rm=TRUE),n=n())
write.table(pox1,"pox_plot_data.txt")
aov
res.aov2 <- aov(rgr ~ days + Genotype, data = pox1)
summary(res.aov2)
setwd <- "C:\Users\adams\Documents\08_website\github\steinbrennerlab.github.io"
setwd <- "C:/Users/adams/Documents/08_website/github/steinbrennerlab.github.io"
library(ggplot2)
library(readr)
members <- read_csv("lab_members.csv")
dir <- "C:/Users/adams/Documents/08_website/github/steinbrennerlab.github.io"
setwd(dir)
library(ggplot2)
library(readr)
members <- read_csv("lab_members.csv")
View(members)
dir <- "C:/Users/adams/Documents/08_website/github/steinbrennerlab.github.io"
setwd(dir)
library(ggplot2)
library(readr)
members <- read_csv("lab_members.csv",sep="\t")
dir <- "C:/Users/adams/Documents/08_website/github/steinbrennerlab.github.io"
setwd(dir)
library(ggplot2)
library(readr)
members <- read_csv2("lab_members.csv",sep="\t")
library(readr)
lab_members <- read_delim("lab_members.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(lab_members)
dir <- "C:/Users/adams/Documents/08_website/github/steinbrennerlab.github.io"
setwd(dir)
library(ggplot2)
library(readr)
lab_members <- read_delim("lab_members.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#lab_members$category <- factor(activities$activity,
levels = activities$activity[nrow(activities):1])
dir <- "C:/Users/adams/Documents/08_website/github/steinbrennerlab.github.io"
setwd(dir)
library(ggplot2)
library(readr)
lab_members <- read_delim("lab_members.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#lab_members$category <- factor(activities$activity,levels = activities$activity[nrow(activities):1])
plot_gantt <- qplot(ymin = start,
ymax = end,
x = activity,
colour = category,
geom = "linerange",
data = lab_members,
size = I(5)) +
scale_colour_manual(values = c("black", "grey", "purple", "yellow")) +
coord_flip() +
theme_bw() +
theme(panel.grid = element_blank()) +
xlab("") +
ylab("") +
ggtitle("Vacation planning")
dir <- "C:/Users/adams/Documents/08_website/github/steinbrennerlab.github.io"
setwd(dir)
library(ggplot2)
library(readr)
lab_members <- read_delim("lab_members.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#lab_members$category <- factor(activities$activity,levels = activities$activity[nrow(activities):1])
plot_gantt <- qplot(ymin = start,
ymax = end,
x = activity,
colour = category,
geom = "linerange",
data = lab_members,
size = I(5)) +
scale_colour_manual(values = c("black", "grey", "purple", "yellow")) +
coord_flip() +
theme_bw() +
theme(panel.grid = element_blank()) +
xlab("") +
ylab("") +
ggtitle("Vacation planning")
plot_gantt
dir <- "C:/Users/adams/Documents/08_website/github/steinbrennerlab.github.io"
setwd(dir)
library(ggplot2)
library(readr)
lab_members <- read_delim("lab_members.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#lab_members$category <- factor(activities$activity,levels = activities$activity[nrow(activities):1])
plot_gantt <- qplot(ymin = start,
ymax = end,
x = member,
colour = category,
geom = "linerange",
data = lab_members,
size = I(5)) +
scale_colour_manual(values = c("black", "grey", "purple", "yellow")) +
coord_flip() +
theme_bw() +
theme(panel.grid = element_blank()) +
xlab("") +
ylab("") +
ggtitle("Vacation planning")
plot_gantt
dir <- "C:/Users/adams/Documents/08_website/github/steinbrennerlab.github.io"
setwd(dir)
library(ggplot2)
library(readr)
lab_members <- read_delim("lab_members.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(tidyverse)
library(lubridate)
library(scales)
library(Cairo)
library(wesanderson)
# Thanks https://stats.andrewheiss.com/misc/gantt.html
tasks <- read.delim("~/08_website/github/steinbrennerlab.github.io/lab_members.txt")
# Convert data to long for ggplot
tasks.long <- tasks %>%
mutate(Start = ymd(Start),
End = ymd(End)) %>%
gather(date.type, task.date, -c(Project, Task)) %>%
arrange(date.type, task.date) %>%
mutate(Task = factor(Task, levels=rev(unique(Task)), ordered=TRUE))
# Custom theme for making a clean Gantt chart
theme_gantt <- function(base_size=11, base_family="sans") {
ret <- theme_bw(base_size, base_family) %+replace%
theme(panel.background = element_rect(fill="#ffffff", colour=NA),
axis.title.x=element_text(vjust=-0.2), axis.title.y=element_text(vjust=1.5),
title=element_text(vjust=1.2, family="Source Sans Pro Semibold"),
panel.border = element_blank(), axis.line=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size=0.5, colour="grey80"),
axis.ticks=element_blank(),
legend.position="bottom",
axis.title=element_text(size=rel(0.8), family="Source Sans Pro Semibold"),
strip.text=element_text(size=rel(1), family="Source Sans Pro Semibold"),
strip.background=element_rect(fill="#ffffff", colour=NA),
panel.spacing.y=unit(1.5, "lines"),
legend.key = element_blank())
ret
}
# Calculate where to put the dotted lines that show up every three entries
#x.breaks <- seq(length(tasks$Task) + 0.5 - 3, 0, by=-3)
x.breaks <- seq(length(tasks$Task) + 0.5, 0, by=-1)
pal <- wes_palette("Darjeeling1", 5, type = "discrete")
pal[6:10]<-wes_palette("Darjeeling2", 5, type = "discrete")
pal[6:9]<-pal[7:10]
# Build plot
timeline <- ggplot(tasks.long, aes(x=Task, y=task.date, colour=Project)) +
geom_line(size=6) +
geom_vline(xintercept=x.breaks, colour="grey80", linetype="dotted") +
guides(colour=guide_legend(title=NULL)) +
labs(x=NULL, y=NULL) + coord_flip() +
scale_y_date(date_breaks="2 months", labels=date_format("%b ‘%y")) +
theme_gantt() + theme(axis.text.x=element_text(angle=45, hjust=1)) + scale_color_manual(values=pal) +ggtitle("Steinbrenner Lab")
timeline
ggsave(timeline,"lab_members.png")
ggsave("lab_members.png",timeline)
